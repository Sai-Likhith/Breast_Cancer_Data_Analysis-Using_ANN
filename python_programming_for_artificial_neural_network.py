# -*- coding: utf-8 -*-
"""Python Programming for Artificial Neural Network

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e305ATQAM5chLh32tzhvyCysaWBQql3M

# **Python code for data classification using artificial neural network (ANN)**

# **DATASET Used : Breast Cancer**

# Import the required libraries
"""

import pandas as pd
import numpy as np

from sklearn.preprocessing import LabelEncoder

from sklearn.model_selection import train_test_split

import tensorflow as tf

from sklearn.preprocessing import StandardScaler

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

import matplotlib.pyplot as plt
import seaborn as sns

"""# Load the datasets"""

data = pd.read_csv('/content/data.csv')
data

"""# Preprocessing the data

Diagnosis:

*   M - Malignant
*   B - Benign

If a tumor is found to be malignant, you have breast cancer or another form of cancer. Malignant tumors can be aggressive and may spread to other surrounding tissues. They require treatment.

If patient feel a lump in breast, first thought may be that you have breast cancer. Fortunately, a majority of breast lumps are benign, meaning they're not cancerous. Both women and men can develop benign (noncancerous) breast lumps. This condition is known as benign breast disease.
"""

data['diagnosis'].value_counts()

pd.isnull(data).sum()
data = data.dropna( axis=1, how="any", thresh=None, subset=None, inplace=False) #Deletes Null values coulumn if any.
data.drop(['id'],axis = 1, inplace = True)  #Deletes id Column from the dataset as it is not needed for further process.

"""# Design the model"""

x = data.drop('diagnosis', axis = 1)
y = data.diagnosis

y = LabelEncoder().fit_transform(y)

"""# Split the data into training and testing"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2,random_state=40)

x_train = StandardScaler().fit_transform(x_train)
x_test = StandardScaler().fit_transform(x_test)

"""# Build the model"""

model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(9, activation = 'relu', input_dim = 30),
    tf.keras.layers.Dense(9, activation = 'relu'),
    tf.keras.layers.Dense(1, activation = 'sigmoid')
])

model.summary()

model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""# Train the model"""

hist = model.fit(x_train, y_train, batch_size = 100, epochs = 100)

"""# Evaluate the trained model"""

y_pred = model.predict(x_test)
y_pred = y_pred > 0.5

cls_report = classification_report(y_test, y_pred, output_dict=True)
con_mat = confusion_matrix(y_test, y_pred)
score = accuracy_score(y_test, y_pred)

"""# Plot the classification results, confusion matrix using Matplotlib."""

fig = plt.subplots (figsize = (5, 5))
sns.heatmap(con_mat, square = True, cbar = False, annot = True, cmap="GnBu", annot_kws = {'size': 18})
plt.title('Confusion Matrix')
plt.show ()

print('\n')

fig = plt.subplots (figsize = (3.5, 4))
sns.heatmap(pd.DataFrame(cls_report).iloc[:-1, :].T, annot=True)
plt.title('Classification Report')

print('Accuracy Score is : {} %'.format(score*100))